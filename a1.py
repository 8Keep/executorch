==== exir.capture:
_capture.py: exir capture
==== Printing edge.dump():
graph():
    %arg0_1 : [num_users=1] = placeholder[target=arg0_1]
    %arg1_1 : [num_users=1] = placeholder[target=arg1_1]
    %arg2_1 : [num_users=1] = placeholder[target=arg2_1]
    %aten_permute_copy_default : [num_users=1] = call_function[target=executorch.exir.dialects.edge._ops.aten.permute_copy.default](args = (%arg0_1, [1, 0]), kwargs = {})
    %aten_addmm_default : [num_users=1] = call_function[target=executorch.exir.dialects.edge._ops.aten.addmm.default](args = (%arg1_1, %arg2_1, %aten_permute_copy_default), kwargs = {})
    return (aten_addmm_default,)
==== Running to_executorch() passes:
_program.py: to_executorch
_program.py: ExecutorchProgram __init__
==== Printing program:
Program(
  version=0,
  execution_plan=[ExecutionPlan(name='forward', container_meta_type=ContainerMetadata(encoded_inp_str='[1, {"type": "builtins.tuple", "context": "null", "children_spec": [{"type": "builtins.tuple", "context": "null", "children_spec": [{"type": null, "context": null, "children_spec": []}]}, {"type": "builtins.dict", "context": "[]", "children_spec": []}]}]', encoded_out_str='[1, {"type": null, "context": null, "children_spec": []}]'), values=[EValue(val=Tensor(scalar_type=<ScalarType.FLOAT: 6>, storage_offset=0, sizes=[10, 10], dim_order=[0, 1], requires_grad=True, layout=0, constant_buffer_idx=1, allocation_info=None, shape_dynamism=<TensorShapeDynamism.STATIC: 0>)), EValue(val=Tensor(scalar_type=<ScalarType.FLOAT: 6>, storage_offset=0, sizes=[10], dim_order=[0], requires_grad=True, layout=0, constant_buffer_idx=2, allocation_info=None, shape_dynamism=<TensorShapeDynamism.STATIC: 0>)), EValue(val=Tensor(scalar_type=<ScalarType.FLOAT: 6>, storage_offset=0, sizes=[10, 10], dim_order=[0, 1], requires_grad=False, layout=0, constant_buffer_idx=0, allocation_info=AllocationDetails(memory_id=1, memory_offset=448), shape_dynamism=<TensorShapeDynamism.STATIC: 0>)), EValue(val=Tensor(scalar_type=<ScalarType.FLOAT: 6>, storage_offset=0, sizes=[10, 10], dim_order=[0, 1], requires_grad=False, layout=0, constant_buffer_idx=0, allocation_info=AllocationDetails(memory_id=1, memory_offset=848), shape_dynamism=<TensorShapeDynamism.STATIC: 0>)), EValue(val=Int(int_val=1)), EValue(val=Int(int_val=0)), EValue(val=IntList(items=[4, 5])), EValue(val=Tensor(scalar_type=<ScalarType.FLOAT: 6>, storage_offset=0, sizes=[10, 10], dim_order=[0, 1], requires_grad=False, layout=0, constant_buffer_idx=0, allocation_info=AllocationDetails(memory_id=1, memory_offset=0), shape_dynamism=<TensorShapeDynamism.STATIC: 0>)), EValue(val=Int(int_val=1)), EValue(val=Int(int_val=1))], inputs=[2], outputs=[7], chains=[Chain(inputs=[], outputs=[], instructions=[Instruction(instr_args=KernelCall(op_index=0, args=[0, 6, 3, 3])), Instruction(instr_args=KernelCall(op_index=1, args=[1, 2, 3, 8, 9, 7, 7]))], stacktrace=None)], operators=[Operator(name='aten::permute_copy', overload='out'), Operator(name='aten::addmm', overload='out')], delegates=[], non_const_buffer_sizes=[0, 1248])],
  constant_buffer=[
    Buffer(storage=b''),
    Buffer(storage=b'\xd1\xbb\x1d\xbew\x13\x1f\xbeX\xd3l\xbd\xd5Y\x18>\xee\x81\x11\xbe]\xb7\x81\xbe\x9a\x9cv>J#V\xbe-\x84`\xbev\x15:=\'\x1a@\xbe\x94\x87\x1a\xbe\xfbf\x1f\xbe\x10\xb2\xbf\xbd\xa3\xa9\x96>\x9cXw>B\'\x9e\xbe\xa3\x9fh\xbe\xddF\x93>\xe1M)>_\x0f\xc0=\x8f@\xa1>m:m>\x8d\xc7\xf3=v\xb3\x0b\xbb\x0e\xdd\x04>\xc9\xdd9>O\xb2J\xbe\x17\xf8.\xbe\xce\xbfm>\x8e^\xc8=\xc6\xd2\xaf\xbd\xad\x07\x82\xbd\xf4\xb7n>\x01x\x1d\xbd5\xc1\x91>I\xdd\x13\xbedU\x1f>\xb2\x1d\x99\xbb\xb9#\x02>a\xd2\x02=\x89\xc5K>\\\x9f;\xbc\x93\x01\x16\xbe\xf5\x8e\x98\xbe%\xe88\xbe*7\x8b\xbe\xda\\\x14\xbc\x9f\x10\xfe\xbc\x05\x08\x9d>\xa0\xb3"\xbc9\xff\xe6<3\xfe\x8c\xbevd\x87\xbew\xeb\x92>d\xfe\xdc=f\xc8a\xbe\x9d\xbb\xfa=?t}<\x9e\xa1->yG/\xbe\xe69\xcc=\xa5]\x8b\xbe1\xc2<\xbe\xd2\xc2%>\x01bH\xbeD\xd1\xc8=\x8b\xd7\x7f\xbetOk>Y\xd9>\xbcr\xd7\x80=\xb0\xa6\'>\x00"\xfc\xbd\x89\x80F\xbbQ\xb5\x0f>\x00va>\xa8\xe2[\xbe{\x98<\xbe\x9e \xdf\xbd\xfdu =\x9cV=\xbe\xf3\xbc\x08\xbd_h\x1a\xbe\x19\x0f\x02>s\xe6\x1f>\x18s\xd9=\x19\xfc\x8b=\x96v\x14>l;f>\xbe\xf3\xd3=D1\xb3=\xffn\xe8=\x97\xea?>x%:\xbe\x13\x14m\xbe\xac\xffr\xbe\xf3xz\xbdB\xae\x0f\xbe\xcaq\xb2=\x9bm\xfd\xbd'),
    Buffer(storage=b'\xb5\x8bH\xbe\xdc%\x01\xbe\x93`\x93\xbe\xeeT&\xbe\xad5\xa7=\xde3\x99\xbe\xd3\xe1\x82\xbeP\x08\t\xbe!\xd9.=\xa8\xb0\x8c>')], backend_delegate_data=[], segments=[])
==== Print buffer:
_program.py: serialize_pte_binary
_serialize/_program.py: _program_to_json: program=Program(version=0, execution_plan=[ExecutionPlan(name='forward', container_meta_type=ContainerMetadata(encoded_inp_str='[1, {"type": "builtins.tuple", "context": "null", "children_spec": [{"type": "builtins.tuple", "context": "null", "children_spec": [{"type": null, "context": null, "children_spec": []}]}, {"type": "builtins.dict", "context": "[]", "children_spec": []}]}]', encoded_out_str='[1, {"type": null, "context": null, "children_spec": []}]'), values=[EValue(val=Tensor(scalar_type=<ScalarType.FLOAT: 6>, storage_offset=0, sizes=[10, 10], dim_order=[0, 1], requires_grad=True, layout=0, constant_buffer_idx=1, allocation_info=None, shape_dynamism=<TensorShapeDynamism.STATIC: 0>)), EValue(val=Tensor(scalar_type=<ScalarType.FLOAT: 6>, storage_offset=0, sizes=[10], dim_order=[0], requires_grad=True, layout=0, constant_buffer_idx=2, allocation_info=None, shape_dynamism=<TensorShapeDynamism.STATIC: 0>)), EValue(val=Tensor(scalar_type=<ScalarType.FLOAT: 6>, storage_offset=0, sizes=[10, 10], dim_order=[0, 1], requires_grad=False, layout=0, constant_buffer_idx=0, allocation_info=AllocationDetails(memory_id=1, memory_offset=448), shape_dynamism=<TensorShapeDynamism.STATIC: 0>)), EValue(val=Tensor(scalar_type=<ScalarType.FLOAT: 6>, storage_offset=0, sizes=[10, 10], dim_order=[0, 1], requires_grad=False, layout=0, constant_buffer_idx=0, allocation_info=AllocationDetails(memory_id=1, memory_offset=848), shape_dynamism=<TensorShapeDynamism.STATIC: 0>)), EValue(val=Int(int_val=1)), EValue(val=Int(int_val=0)), EValue(val=IntList(items=[4, 5])), EValue(val=Tensor(scalar_type=<ScalarType.FLOAT: 6>, storage_offset=0, sizes=[10, 10], dim_order=[0, 1], requires_grad=False, layout=0, constant_buffer_idx=0, allocation_info=AllocationDetails(memory_id=1, memory_offset=0), shape_dynamism=<TensorShapeDynamism.STATIC: 0>)), EValue(val=Int(int_val=1)), EValue(val=Int(int_val=1))], inputs=[2], outputs=[7], chains=[Chain(inputs=[], outputs=[], instructions=[Instruction(instr_args=KernelCall(op_index=0, args=[0, 6, 3, 3])), Instruction(instr_args=KernelCall(op_index=1, args=[1, 2, 3, 8, 9, 7, 7]))], stacktrace=None)], operators=[Operator(name='aten::permute_copy', overload='out'), Operator(name='aten::addmm', overload='out')], delegates=[], non_const_buffer_sizes=[0, 1248])], constant_buffer=[Buffer(storage=b''), Buffer(storage=b'\xd1\xbb\x1d\xbew\x13\x1f\xbeX\xd3l\xbd\xd5Y\x18>\xee\x81\x11\xbe]\xb7\x81\xbe\x9a\x9cv>J#V\xbe-\x84`\xbev\x15:=\'\x1a@\xbe\x94\x87\x1a\xbe\xfbf\x1f\xbe\x10\xb2\xbf\xbd\xa3\xa9\x96>\x9cXw>B\'\x9e\xbe\xa3\x9fh\xbe\xddF\x93>\xe1M)>_\x0f\xc0=\x8f@\xa1>m:m>\x8d\xc7\xf3=v\xb3\x0b\xbb\x0e\xdd\x04>\xc9\xdd9>O\xb2J\xbe\x17\xf8.\xbe\xce\xbfm>\x8e^\xc8=\xc6\xd2\xaf\xbd\xad\x07\x82\xbd\xf4\xb7n>\x01x\x1d\xbd5\xc1\x91>I\xdd\x13\xbedU\x1f>\xb2\x1d\x99\xbb\xb9#\x02>a\xd2\x02=\x89\xc5K>\\\x9f;\xbc\x93\x01\x16\xbe\xf5\x8e\x98\xbe%\xe88\xbe*7\x8b\xbe\xda\\\x14\xbc\x9f\x10\xfe\xbc\x05\x08\x9d>\xa0\xb3"\xbc9\xff\xe6<3\xfe\x8c\xbevd\x87\xbew\xeb\x92>d\xfe\xdc=f\xc8a\xbe\x9d\xbb\xfa=?t}<\x9e\xa1->yG/\xbe\xe69\xcc=\xa5]\x8b\xbe1\xc2<\xbe\xd2\xc2%>\x01bH\xbeD\xd1\xc8=\x8b\xd7\x7f\xbetOk>Y\xd9>\xbcr\xd7\x80=\xb0\xa6\'>\x00"\xfc\xbd\x89\x80F\xbbQ\xb5\x0f>\x00va>\xa8\xe2[\xbe{\x98<\xbe\x9e \xdf\xbd\xfdu =\x9cV=\xbe\xf3\xbc\x08\xbd_h\x1a\xbe\x19\x0f\x02>s\xe6\x1f>\x18s\xd9=\x19\xfc\x8b=\x96v\x14>l;f>\xbe\xf3\xd3=D1\xb3=\xffn\xe8=\x97\xea?>x%:\xbe\x13\x14m\xbe\xac\xffr\xbe\xf3xz\xbdB\xae\x0f\xbe\xcaq\xb2=\x9bm\xfd\xbd'), Buffer(storage=b'\xb5\x8bH\xbe\xdc%\x01\xbe\x93`\x93\xbe\xeeT&\xbe\xad5\xa7=\xde3\x99\xbe\xd3\xe1\x82\xbeP\x08\t\xbe!\xd9.=\xa8\xb0\x8c>')], backend_delegate_data=[], segments=[])


_serialize/_flatbuffer.py: _program_json_to_flatbuffer. program_json: {"version": 0, "execution_plan": [{"name": "forward", "container_meta_type": {"encoded_inp_str": "[1, {\"type\": \"builtins.tuple\", \"context\": \"null\", \"children_spec\": [{\"type\": \"builtins.tuple\", \"context\": \"null\", \"children_spec\": [{\"type\": null, \"context\": null, \"children_spec\": []}]}, {\"type\": \"builtins.dict\", \"context\": \"[]\", \"children_spec\": []}]}]", "encoded_out_str": "[1, {\"type\": null, \"context\": null, \"children_spec\": []}]"}, "values": [{"val": {"scalar_type": 6, "storage_offset": 0, "sizes": [10, 10], "dim_order": [0, 1], "requires_grad": true, "layout": 0, "constant_buffer_idx": 1, "allocation_info": null, "shape_dynamism": 0}, "val_type": "Tensor"}, {"val": {"scalar_type": 6, "storage_offset": 0, "sizes": [10], "dim_order": [0], "requires_grad": true, "layout": 0, "constant_buffer_idx": 2, "allocation_info": null, "shape_dynamism": 0}, "val_type": "Tensor"}, {"val": {"scalar_type": 6, "storage_offset": 0, "sizes": [10, 10], "dim_order": [0, 1], "requires_grad": false, "layout": 0, "constant_buffer_idx": 0, "allocation_info": {"memory_id": 1, "memory_offset": 448}, "shape_dynamism": 0}, "val_type": "Tensor"}, {"val": {"scalar_type": 6, "storage_offset": 0, "sizes": [10, 10], "dim_order": [0, 1], "requires_grad": false, "layout": 0, "constant_buffer_idx": 0, "allocation_info": {"memory_id": 1, "memory_offset": 848}, "shape_dynamism": 0}, "val_type": "Tensor"}, {"val": {"int_val": 1}, "val_type": "Int"}, {"val": {"int_val": 0}, "val_type": "Int"}, {"val": {"items": [4, 5]}, "val_type": "IntList"}, {"val": {"scalar_type": 6, "storage_offset": 0, "sizes": [10, 10], "dim_order": [0, 1], "requires_grad": false, "layout": 0, "constant_buffer_idx": 0, "allocation_info": {"memory_id": 1, "memory_offset": 0}, "shape_dynamism": 0}, "val_type": "Tensor"}, {"val": {"int_val": 1}, "val_type": "Int"}, {"val": {"int_val": 1}, "val_type": "Int"}], "inputs": [2], "outputs": [7], "chains": [{"inputs": [], "outputs": [], "instructions": [{"instr_args": {"op_index": 0, "args": [0, 6, 3, 3]}, "instr_args_type": "KernelCall"}, {"instr_args": {"op_index": 1, "args": [1, 2, 3, 8, 9, 7, 7]}, "instr_args_type": "KernelCall"}], "stacktrace": null}], "operators": [{"name": "aten::permute_copy", "overload": "out"}, {"name": "aten::addmm", "overload": "out"}], "delegates": [], "non_const_buffer_sizes": [0, 1248]}], "constant_buffer": [{"storage": []}, {"storage": [209, 187, 29, 190, 119, 19, 31, 190, 88, 211, 108, 189, 213, 89, 24, 62, 238, 129, 17, 190, 93, 183, 129, 190, 154, 156, 118, 62, 74, 35, 86, 190, 45, 132, 96, 190, 118, 21, 58, 61, 39, 26, 64, 190, 148, 135, 26, 190, 251, 102, 31, 190, 16, 178, 191, 189, 163, 169, 150, 62, 156, 88, 119, 62, 66, 39, 158, 190, 163, 159, 104, 190, 221, 70, 147, 62, 225, 77, 41, 62, 95, 15, 192, 61, 143, 64, 161, 62, 109, 58, 109, 62, 141, 199, 243, 61, 118, 179, 11, 187, 14, 221, 4, 62, 201, 221, 57, 62, 79, 178, 74, 190, 23, 248, 46, 190, 206, 191, 109, 62, 142, 94, 200, 61, 198, 210, 175, 189, 173, 7, 130, 189, 244, 183, 110, 62, 1, 120, 29, 189, 53, 193, 145, 62, 73, 221, 19, 190, 100, 85, 31, 62, 178, 29, 153, 187, 185, 35, 2, 62, 97, 210, 2, 61, 137, 197, 75, 62, 92, 159, 59, 188, 147, 1, 22, 190, 245, 142, 152, 190, 37, 232, 56, 190, 42, 55, 139, 190, 218, 92, 20, 188, 159, 16, 254, 188, 5, 8, 157, 62, 160, 179, 34, 188, 57, 255, 230, 60, 51, 254, 140, 190, 118, 100, 135, 190, 119, 235, 146, 62, 100, 254, 220, 61, 102, 200, 97, 190, 157, 187, 250, 61, 63, 116, 125, 60, 158, 161, 45, 62, 121, 71, 47, 190, 230, 57, 204, 61, 165, 93, 139, 190, 49, 194, 60, 190, 210, 194, 37, 62, 1, 98, 72, 190, 68, 209, 200, 61, 139, 215, 127, 190, 116, 79, 107, 62, 89, 217, 62, 188, 114, 215, 128, 61, 176, 166, 39, 62, 0, 34, 252, 189, 137, 128, 70, 187, 81, 181, 15, 62, 0, 118, 97, 62, 168, 226, 91, 190, 123, 152, 60, 190, 158, 32, 223, 189, 253, 117, 32, 61, 156, 86, 61, 190, 243, 188, 8, 189, 95, 104, 26, 190, 25, 15, 2, 62, 115, 230, 31, 62, 24, 115, 217, 61, 25, 252, 139, 61, 150, 118, 20, 62, 108, 59, 102, 62, 190, 243, 211, 61, 68, 49, 179, 61, 255, 110, 232, 61, 151, 234, 63, 62, 120, 37, 58, 190, 19, 20, 109, 190, 172, 255, 114, 190, 243, 120, 122, 189, 66, 174, 15, 190, 202, 113, 178, 61, 155, 109, 253, 189]}, {"storage": [181, 139, 72, 190, 220, 37, 1, 190, 147, 96, 147, 190, 238, 84, 38, 190, 173, 53, 167, 61, 222, 51, 153, 190, 211, 225, 130, 190, 80, 8, 9, 190, 33, 217, 46, 61, 168, 176, 140, 62]}], "backend_delegate_data": [], "segments": []}
_serialize/_flatbuffer.py: program_json.encode('ascii'): b'{"version": 0, "execution_plan": [{"name": "forward", "container_meta_type": {"encoded_inp_str": "[1, {\\"type\\": \\"builtins.tuple\\", \\"context\\": \\"null\\", \\"children_spec\\": [{\\"type\\": \\"builtins.tuple\\", \\"context\\": \\"null\\", \\"children_spec\\": [{\\"type\\": null, \\"context\\": null, \\"children_spec\\": []}]}, {\\"type\\": \\"builtins.dict\\", \\"context\\": \\"[]\\", \\"children_spec\\": []}]}]", "encoded_out_str": "[1, {\\"type\\": null, \\"context\\": null, \\"children_spec\\": []}]"}, "values": [{"val": {"scalar_type": 6, "storage_offset": 0, "sizes": [10, 10], "dim_order": [0, 1], "requires_grad": true, "layout": 0, "constant_buffer_idx": 1, "allocation_info": null, "shape_dynamism": 0}, "val_type": "Tensor"}, {"val": {"scalar_type": 6, "storage_offset": 0, "sizes": [10], "dim_order": [0], "requires_grad": true, "layout": 0, "constant_buffer_idx": 2, "allocation_info": null, "shape_dynamism": 0}, "val_type": "Tensor"}, {"val": {"scalar_type": 6, "storage_offset": 0, "sizes": [10, 10], "dim_order": [0, 1], "requires_grad": false, "layout": 0, "constant_buffer_idx": 0, "allocation_info": {"memory_id": 1, "memory_offset": 448}, "shape_dynamism": 0}, "val_type": "Tensor"}, {"val": {"scalar_type": 6, "storage_offset": 0, "sizes": [10, 10], "dim_order": [0, 1], "requires_grad": false, "layout": 0, "constant_buffer_idx": 0, "allocation_info": {"memory_id": 1, "memory_offset": 848}, "shape_dynamism": 0}, "val_type": "Tensor"}, {"val": {"int_val": 1}, "val_type": "Int"}, {"val": {"int_val": 0}, "val_type": "Int"}, {"val": {"items": [4, 5]}, "val_type": "IntList"}, {"val": {"scalar_type": 6, "storage_offset": 0, "sizes": [10, 10], "dim_order": [0, 1], "requires_grad": false, "layout": 0, "constant_buffer_idx": 0, "allocation_info": {"memory_id": 1, "memory_offset": 0}, "shape_dynamism": 0}, "val_type": "Tensor"}, {"val": {"int_val": 1}, "val_type": "Int"}, {"val": {"int_val": 1}, "val_type": "Int"}], "inputs": [2], "outputs": [7], "chains": [{"inputs": [], "outputs": [], "instructions": [{"instr_args": {"op_index": 0, "args": [0, 6, 3, 3]}, "instr_args_type": "KernelCall"}, {"instr_args": {"op_index": 1, "args": [1, 2, 3, 8, 9, 7, 7]}, "instr_args_type": "KernelCall"}], "stacktrace": null}], "operators": [{"name": "aten::permute_copy", "overload": "out"}, {"name": "aten::addmm", "overload": "out"}], "delegates": [], "non_const_buffer_sizes": [0, 1248]}], "constant_buffer": [{"storage": []}, {"storage": [209, 187, 29, 190, 119, 19, 31, 190, 88, 211, 108, 189, 213, 89, 24, 62, 238, 129, 17, 190, 93, 183, 129, 190, 154, 156, 118, 62, 74, 35, 86, 190, 45, 132, 96, 190, 118, 21, 58, 61, 39, 26, 64, 190, 148, 135, 26, 190, 251, 102, 31, 190, 16, 178, 191, 189, 163, 169, 150, 62, 156, 88, 119, 62, 66, 39, 158, 190, 163, 159, 104, 190, 221, 70, 147, 62, 225, 77, 41, 62, 95, 15, 192, 61, 143, 64, 161, 62, 109, 58, 109, 62, 141, 199, 243, 61, 118, 179, 11, 187, 14, 221, 4, 62, 201, 221, 57, 62, 79, 178, 74, 190, 23, 248, 46, 190, 206, 191, 109, 62, 142, 94, 200, 61, 198, 210, 175, 189, 173, 7, 130, 189, 244, 183, 110, 62, 1, 120, 29, 189, 53, 193, 145, 62, 73, 221, 19, 190, 100, 85, 31, 62, 178, 29, 153, 187, 185, 35, 2, 62, 97, 210, 2, 61, 137, 197, 75, 62, 92, 159, 59, 188, 147, 1, 22, 190, 245, 142, 152, 190, 37, 232, 56, 190, 42, 55, 139, 190, 218, 92, 20, 188, 159, 16, 254, 188, 5, 8, 157, 62, 160, 179, 34, 188, 57, 255, 230, 60, 51, 254, 140, 190, 118, 100, 135, 190, 119, 235, 146, 62, 100, 254, 220, 61, 102, 200, 97, 190, 157, 187, 250, 61, 63, 116, 125, 60, 158, 161, 45, 62, 121, 71, 47, 190, 230, 57, 204, 61, 165, 93, 139, 190, 49, 194, 60, 190, 210, 194, 37, 62, 1, 98, 72, 190, 68, 209, 200, 61, 139, 215, 127, 190, 116, 79, 107, 62, 89, 217, 62, 188, 114, 215, 128, 61, 176, 166, 39, 62, 0, 34, 252, 189, 137, 128, 70, 187, 81, 181, 15, 62, 0, 118, 97, 62, 168, 226, 91, 190, 123, 152, 60, 190, 158, 32, 223, 189, 253, 117, 32, 61, 156, 86, 61, 190, 243, 188, 8, 189, 95, 104, 26, 190, 25, 15, 2, 62, 115, 230, 31, 62, 24, 115, 217, 61, 25, 252, 139, 61, 150, 118, 20, 62, 108, 59, 102, 62, 190, 243, 211, 61, 68, 49, 179, 61, 255, 110, 232, 61, 151, 234, 63, 62, 120, 37, 58, 190, 19, 20, 109, 190, 172, 255, 114, 190, 243, 120, 122, 189, 66, 174, 15, 190, 202, 113, 178, 61, 155, 109, 253, 189]}, {"storage": [181, 139, 72, 190, 220, 37, 1, 190, 147, 96, 147, 190, 238, 84, 38, 190, 173, 53, 167, 61, 222, 51, 153, 190, 211, 225, 130, 190, 80, 8, 9, 190, 33, 217, 46, 61, 168, 176, 140, 62]}], "backend_delegate_data": [], "segments": []}'


b'\x18\x00\x00\x00ET12\x00\x00\x0e\x00\x14\x00\x00\x00\x04\x00\x08\x00\x0c\x00\x10\x00\x0e\x00\x00\x00\x18\x02\x00\x00\x14\x00\x00\x00\x0c\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xf0\x01\x00\x00H\x00\x00\x00\x04\x00\x00\x00\xee\xfb\xff\xff\x04\x00\x00\x00(\x00\x00\x00\xb5\x8bH\xbe\xdc%\x01\xbe\x93`\x93\xbe\xeeT&\xbe\xad5\xa7=\xde3\x99\xbe\xd3\xe1\x82\xbeP\x08\t\xbe!\xd9.=\xa8\xb0\x8c>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00.\xfc\xff\xff\x04\x00\x00\x00\x90\x01\x00\x00\xd1\xbb\x1d\xbew\x13\x1f\xbeX\xd3l\xbd\xd5Y\x18>\xee\x81\x11\xbe]\xb7\x81\xbe\x9a\x9cv>J#V\xbe-\x84`\xbev\x15:=\'\x1a@\xbe\x94\x87\x1a\xbe\xfbf\x1f\xbe\x10\xb2\xbf\xbd\xa3\xa9\x96>\x9cXw>B\'\x9e\xbe\xa3\x9fh\xbe\xddF\x93>\xe1M)>_\x0f\xc0=\x8f@\xa1>m:m>\x8d\xc7\xf3=v\xb3\x0b\xbb\x0e\xdd\x04>\xc9\xdd9>O\xb2J\xbe\x17\xf8.\xbe\xce\xbfm>\x8e^\xc8=\xc6\xd2\xaf\xbd\xad\x07\x82\xbd\xf4\xb7n>\x01x\x1d\xbd5\xc1\x91>I\xdd\x13\xbedU\x1f>\xb2\x1d\x99\xbb\xb9#\x02>a\xd2\x02=\x89\xc5K>\\\x9f;\xbc\x93\x01\x16\xbe\xf5\x8e\x98\xbe%\xe88\xbe*7\x8b\xbe\xda\\\x14\xbc\x9f\x10\xfe\xbc\x05\x08\x9d>\xa0\xb3"\xbc9\xff\xe6<3\xfe\x8c\xbevd\x87\xbew\xeb\x92>d\xfe\xdc=f\xc8a\xbe\x9d\xbb\xfa=?t}<\x9e\xa1->yG/\xbe\xe69\xcc=\xa5]\x8b\xbe1\xc2<\xbe\xd2\xc2%>\x01bH\xbeD\xd1\xc8=\x8b\xd7\x7f\xbetOk>Y\xd9>\xbcr\xd7\x80=\xb0\xa6\'>\x00"\xfc\xbd\x89\x80F\xbbQ\xb5\x0f>\x00va>\xa8\xe2[\xbe{\x98<\xbe\x9e \xdf\xbd\xfdu =\x9cV=\xbe\xf3\xbc\x08\xbd_h\x1a\xbe\x19\x0f\x02>s\xe6\x1f>\x18s\xd9=\x19\xfc\x8b=\x96v\x14>l;f>\xbe\xf3\xd3=D1\xb3=\xffn\xe8=\x97\xea?>x%:\xbe\x13\x14m\xbe\xac\xffr\xbe\xf3xz\xbdB\xae\x0f\xbe\xcaq\xb2=\x9bm\xfd\xbd\x00\x00\x00\x00\x00\x00\x00\x00\xd2\xfd\xff\xff\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x16\x00(\x00\x04\x00\x08\x00\x0c\x00\x10\x00\x14\x00\x18\x00\x1c\x00 \x00$\x00\x16\x00\x00\x00\xcc\x04\x00\x00x\x03\x00\x00D\x01\x00\x008\x01\x00\x00,\x01\x00\x00\x88\x00\x00\x00(\x00\x00\x00 \x00\x00\x00\x04\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00,\x00\x00\x00\x04\x00\x00\x00\xd8\xfc\xff\xff\x10\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00out\x00\x0b\x00\x00\x00aten::addmm\x00\xfc\xfc\xff\xff\x10\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00out\x00\x12\x00\x00\x00aten::permute_copy\x00\x00\x01\x00\x00\x00\x10\x00\x00\x00\x00\x00\n\x00\x10\x00\x04\x00\x08\x00\x0c\x00\n\x00\x00\x00\x84\x00\x00\x00|\x00\x00\x00\x04\x00\x00\x00\x02\x00\x00\x00@\x00\x00\x00\x04\x00\x00\x00\xa4\xfd\xff\xff\x00\x00\x00\x01\x04\x00\x00\x00d\xfd\xff\xff\x01\x00\x00\x00\x04\x00\x00\x00\x07\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\x07\x00\x00\x00\x07\x00\x00\x00\xdc\xfd\xff\xff\x00\x00\x00\x01\x0c\x00\x00\x00\x08\x00\x08\x00\x00\x00\x04\x00\x08\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\n\x00\x00\x00\xe0\x01\x00\x00\xa4\x01\x00\x00L\x01\x00\x00\x00\x01\x00\x00\xd8\x00\x00\x00\xc0\x00\x00\x00\x88\x00\x00\x00H\x00\x00\x00(\x00\x00\x00\x04\x00\x00\x00\xdc\xfe\xff\xff\x00\x00\x00\x02\x0c\x00\x00\x00\x00\x00\x06\x00\x0c\x00\x04\x00\x06\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00p\xfe\xff\xff\x00\x00\x00\x02\x04\x00\x00\x00^\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8c\xfe\xff\xff\x00\x00\x00\x05\x04\x00\x00\x00\x0e\xff\xff\xff\x00\x00\x00\x06\x1c\x00\x00\x00\x10\x00\x00\x00\x04\x00\x00\x00\xd6\xff\xff\xff\x01\x00\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x02\x00\x00\x00\n\x00\x00\x00\n\x00\x00\x00T\xff\xff\xff\x00\x00\x00\x07\x0c\x00\x00\x00\x00\x00\x06\x00\x08\x00\x04\x00\x06\x00\x00\x00\x04\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\xfe\xff\xff\x00\x00\x00\x02\x08\x00\x00\x00\x04\x00\x04\x00\x04\x00\x00\x00\x9c\xff\xff\xff\x00\x00\x00\x02\x0c\x00\x00\x00\x00\x00\x06\x00\x10\x00\x04\x00\x06\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x004\xff\xff\xff\x00\x00\x00\x05\x04\x00\x00\x00\xb6\xff\xff\xff\x00\x00\x00\x06 \x00\x00\x00\x14\x00\x00\x00\x04\x00\x00\x00\x08\xff\xff\xff\x01\x00\x00\x00P\x03\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x02\x00\x00\x00\n\x00\x00\x00\n\x00\x00\x00\x08\x00\x0e\x00\x07\x00\x08\x00\x08\x00\x00\x00\x00\x00\x00\x05\x18\x00\x00\x00\x00\x00\x12\x00\x14\x00\x07\x00\x00\x00\x08\x00\x0c\x00\x00\x00\x00\x00\x10\x00\x12\x00\x00\x00\x00\x00\x00\x06 \x00\x00\x00\x14\x00\x00\x00\x04\x00\x00\x00d\xff\xff\xff\x01\x00\x00\x00\xc0\x01\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x02\x00\x00\x00\n\x00\x00\x00\n\x00\x00\x00\xd0\xff\xff\xff\x00\x00\x00\x05\x04\x00\x00\x00\xc8\xff\xff\xff\x00\x00\x06\x01\x14\x00\x00\x00\x08\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\n\x00\x00\x00\x08\x00\x0c\x00\x07\x00\x08\x00\x08\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00\x00\x10\x00\x14\x00\x06\x00\x00\x00\x08\x00\x0c\x00\x07\x00\x10\x00\x10\x00\x00\x00\x00\x00\x06\x01\x14\x00\x00\x00\x08\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x02\x00\x00\x00\n\x00\x00\x00\n\x00\x00\x00\x08\x00\x0c\x00\x04\x00\x08\x00\x08\x00\x00\x00H\x00\x00\x00\x04\x00\x00\x009\x00\x00\x00[1, {"type": null, "context": null, "children_spec": []}]\x00\x00\x00\xfe\x00\x00\x00[1, {"type": "builtins.tuple", "context": "null", "children_spec": [{"type": "builtins.tuple", "context": "null", "children_spec": [{"type": null, "context": null, "children_spec": []}]}, {"type": "builtins.dict", "context": "[]", "children_spec": []}]}]\x00\x00\x07\x00\x00\x00forward\x00'
=== write to linear_a1.pte
